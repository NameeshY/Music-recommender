%%writefile helper.py
import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import pairwise_distances

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Music data
music_data = pd.read_csv('data_with_most_lyrics.csv')
music_data = music_data.drop(columns=['Unnamed: 0', 'Unnamed: 0.1'])
music_data['lyrics'] = music_data['lyrics'].str.replace('\n', ' ')
available_songs = music_data["track_name"] + ', ' + music_data["artist_name"]
available_songs = available_songs.tolist()

# Past music data
past_data = pd.read_csv('spotify_data_urls.csv')

def find_title_from_index(index):
    return music_data["track_name"][index]
def find_artist_from_index(index):
    return music_data["artist_name"][index]
def find_index_from_title(track_name):
    return music_data.index[music_data.track_name == track_name].values[0]
# end imports

###########################
# FUNCTION YOU'RE EDITING #
###########################

def top_song_recs(data, genre, K, method='track_popularity'):
  # separating genre values
  separated_genres = separate_values('genres')

  # segmenting data based on chosen genre
  genre_tracks = None
  if genre.value!=None:
    genre_tracks = separated_genres.loc[separated_genres['genres'] == genre]

    # YOUR CODE HERE (replace the None)
    if method == 'hit_prediction':
      # YOUR CODE HERE
      pass
    else:
      # YOUR CODE HERE
      pass

  return None, None

###############################
# END FUNCTION YOU'RE EDITING #
###############################

def parse_string_into_list(string):
  return string[1:len(string)-1].split(', ')

def separate_values(column):
  mdata = music_data.copy()
  mdata[column] = mdata.apply(lambda row: parse_string_into_list(row[column]), axis=1)
  mdata.head()

  mdata = mdata.explode(column)
  return mdata
